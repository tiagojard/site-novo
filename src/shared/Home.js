import React, { Component } from 'react';
import Produto from './Produto'
class Home extends Component {
    constructor(props) {
        super(props);
       
        this.conteudo = [ {
            "assunto": [
            {
            "imagem": "/img/csharp.svg",
            "nome": "CSharp"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">C# function equivalent to encodeURIComponent() of JavaScript</h2>\n\n<p>No exemplo abaixo vamos mostrar a função equivalente ao <code>encodeURIComponent()</code> em <code>C#</code> o resultado será o mesmo.</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\">encodeURIComponent(\"Guia do desenvolvedor\")/* JavaScript */\n/*Resultado -> \"Guia%20do%20desenvolvedor\"*/\n\n@Uri.EscapeDataString(\"Guia do desenvolvedor\") /* C# */\n/*Resultado -> \"Guia%20do%20desenvolvedor\"*/\n</code></pre>\n",
            "conteudo_site": "<h2 class=\"sub-titulo\">C# function equivalent to encodeURIComponent() of JavaScript</h2>\n\n<p>No exemplo abaixo vamos mostrar a função equivalente ao <code>encodeURIComponent()</code> em <code>C#</code> o resultado será o mesmo.</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">encodeURIComponent(<span style=\"color:#2cc160\">\"Guia do desenvolvedor\"</span>)<span style=\"color:green\">/* JavaScript */</span><span style=\"color:#79b6f2\">\n</span><span style=\"color:green\">/*Resultado -&gt; \"Guia%20do%20desenvolvedor\"*/</span>\n\n@Uri.<span style=\"color:#79b6f2\">EscapeDataString</span>(<span style=\"color:#2cc160\">\"Guia do desenvolvedor\"</span>) <span style=\"color:green\">/* C# */</span><span style=\"color:#79b6f2\">\n</span><span style=\"color:green\">/*Resultado -&gt; \"Guia%20do%20desenvolvedor\"*/</span>\n</span></code></pre>\n",
            "descricao": "Nesse exemplo vamos mostrar que no c# tem uma função equivalente ao encodeURIComponent() do javascript.",
            "description": "Nesse exemplo vamos mostrar que no c# tem uma função equivalente ao encodeURIComponent() do javascript.",
            "pesquisa": "c# função equivalente ao encodeURIComponent() do JavaScript",
            "title": "C# função equivalente ao encodeURIComponent() do JavaScript",
            "url": "/-LRckatJvYXdmGIxawJF/c#-funcao-equivalente-ao-encodeuricomponent-do-javascript"
            },
            {
            "assunto": [
            {
            "imagem": "/img/javascript.svg",
            "nome": "JavaScript"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">Add item to array javascript</h2>\n\n<p>Nesse exemplo vamos mostrar como adicionar um elemento em uma lista em javaScript.</p>\n\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">var</span> lista = [<span style=\"color:#2cc160\">\"A\"</span>, <span style=\"color:#2cc160\">\"B\"</span>, <span style=\"color:#2cc160\">\"C\"</span>, <span style=\"color:#2cc160\">\"D\"</span>];\n\nlista.<span style=\"color:#79b6f2\">push</span>(<span style=\"color:#2cc160\">\"E\"</span>);</span></code></pre>\n\n<p>Agora vamos adicionar vários elementos na lista.</p>\n\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">var</span> lista = [<span style=\"color:#2cc160\">\"A\"</span>, <span style=\"color:#2cc160\">\"B\"</span>, <span style=\"color:#2cc160\">\"C\"</span>, <span style=\"color:#2cc160\">\"D\"</span>,<span style=\"color:#2cc160\">\"E\"</span>];\n\nlista.<span style=\"color:#79b6f2\">push</span>(<span style=\"color:#2cc160\">\"F\"</span>,<span style=\"color:#2cc160\">\"G\"</span>,<span style=\"color:#2cc160\">\"H\"</span>);</span></code></pre>\n\n<p><strong>Sintaxe</strong></p>\n\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">array.<span style=\"color:#79b6f2\">push</span>(item1, item2, .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>, itemX)</span></code></pre>\n",
            "conteudo_site": "<h2 class=\"sub-titulo\">Add item to array javascript</h2>\n\n<p>Nesse exemplo vamos mostrar como adicionar um elemento em uma lista em javaScript.</p>\n\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">var</span> lista = [<span style=\"color:#2cc160\">\"A\"</span>, <span style=\"color:#2cc160\">\"B\"</span>, <span style=\"color:#2cc160\">\"C\"</span>, <span style=\"color:#2cc160\">\"D\"</span>];\n\nlista.<span style=\"color:#79b6f2\">push</span>(<span style=\"color:#2cc160\">\"E\"</span>);</span></code></pre>\n\n<p>Agora vamos adicionar vários elementos na lista.</p>\n\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">var</span> lista = [<span style=\"color:#2cc160\">\"A\"</span>, <span style=\"color:#2cc160\">\"B\"</span>, <span style=\"color:#2cc160\">\"C\"</span>, <span style=\"color:#2cc160\">\"D\"</span>,<span style=\"color:#2cc160\">\"E\"</span>];\n\nlista.<span style=\"color:#79b6f2\">push</span>(<span style=\"color:#2cc160\">\"F\"</span>,<span style=\"color:#2cc160\">\"G\"</span>,<span style=\"color:#2cc160\">\"H\"</span>);</span></code></pre>\n\n<p><strong>Sintaxe</strong></p>\n\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">array.<span style=\"color:#79b6f2\">push</span>(item1, item2, .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>, itemX)</span></code></pre>\n",
            "descricao": "Exemplos de como adicionar item em uma lista em javascript",
            "description": "No Guia do desenvolvedor você encontra exemplos de como adicionar item em uma lista em javascript",
            "pesquisa": "como adicionar item array list javascript",
            "title": "Como adicionar item array list javascript",
            "url": "/-LPhUa8it3Jla2FhpIj4/como-adicionar-item-array-list-javascript"
            },
            {
            "assunto": [
            {
            "imagem": "/img/javascript.svg",
            "nome": "JavaScript"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">\nHow to bind a string to a string in javaScript using a separator.</h2>\n<p>Nesse exemplo vamos mostrar como unir os itens de um <code>arrayList</code> para <code>string</code> em javaScript, vamos utilizar o <code>join</code> para unir os itens da lista em uma variável separados por virgula(',').</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">var lista = [\"1\", \"2\", \"3\", \"4\", \"5\"];\n\nvar resultado_lista = lista.map(function(e){return e;}).join(',');\nconsole.log(resultado_lista );\n/*\nResultado  -> \"1,2,3,4,5\"\n*/</code></pre>\n",
            "conteudo_site": "<h2 class=\"sub-titulo\">\nHow to bind a string to a string in javaScript using a separator.</h2>\n<p>Nesse exemplo vamos mostrar como unir os itens de um <code>arrayList</code> para <code>string</code> em javaScript, vamos utilizar o <code>join</code> para unir os itens da lista em uma variável separados por virgula(',').</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">var</span> lista = [<span style=\"color:#2cc160\">\"1\"</span>, <span style=\"color:#2cc160\">\"2\"</span>, <span style=\"color:#2cc160\">\"3\"</span>, <span style=\"color:#2cc160\">\"4\"</span>, <span style=\"color:#2cc160\">\"5\"</span>];\n\n<span style=\"color:#c5a5c5\">var</span> resultado_lista = lista.<span style=\"color:#79b6f2\">map</span>(<span style=\"color:#c5a5c5\">function</span>(e){<span style=\"color:#c5a5c5\">return</span> e;}).<span style=\"color:#79b6f2\">join</span>(<span style=\"color:#2cc160\">','</span>);\nconsole.<span style=\"color:#79b6f2\">log</span>(resultado_lista );<span style=\"color:#79b6f2\">\n</span><span style=\"color:green\">/*\nResultado  -&gt; \"1,2,3,4,5\"\n*/</span></span></code></pre>\n",
            "descricao": "Veja um exemplo de como agrupar uma lista para string em javaScript utilizando o join. Function para Unir um list para string passando separador.",
            "description": "Veja um exemplo de como agrupar uma lista para string em javaScript utilizando o join. Function para Unir um list para string passando separador.",
            "pesquisa": "como unir um arraylist para string em javaScript utilizando um separador.",
            "title": "Como unir os itens de um arraylist para string em javaScript utilizando um separador.",
            "url": "/-LRcnsEm_K1SfJ6yH6ah/como-unir-itens-de-arraylist-para-string-em-javascript-utilizando-um-separador"
            },
             {
            "assunto": [
            {
            "imagem": "/img/javascript.svg",
            "nome": "JavaScript"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">How to create, access, and delete the cookie in javaScript.</h2>\n<p>Para criar um cookie em javaScript utilize a propriedade <code>document.cookie</code>.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">document.cookie = \"nomeUsuario=Tiago Jardim\";</code></pre>\n<p>Por padrão o cookie é excluído quando o navegador é fechado. Veja abaixo como adicionar uma data de expiração para o cookie.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">document.cookie = \"nomeUsuario=Tiago Jardim; expires=Sun Nov 18 2018 20:22:06 GMT-0200\";</code></pre>\n<p>É possível também informar qual é o caminho q o cookie pertence. Por padrão, o cookie pertence à página atual. Veja abaixo como definir o caminho.</p><pre class=\"codigo\"><code data-code=\"javaScript\">document.cookie = \"nomeUsuario=Tiago Jardim; expires=Sun Nov 18 2018 20:22:06 GMT-0200; path=/\";</code></pre>\n<p>Veja abaixo como alterar o cookie em javaScript.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">document.cookie = \"nomeUsuario=Tiago Carvalho; expires=Sun Nov 18 2018 20:22:06 GMT-0200; path=/\";</code></pre>\n<p>Nesse exemplo vamos mostrar como acessar os dados do cookie.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">var cookie = document.cookie;</code></pre>\n<p>Para excluir o cookie basta alterar a data da expiração passada.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">document.cookie = \"nomeUsuario=Tiago Carvalho; expires=Sun Nov 18 1994 20:22:06 GMT-0200; path=/\";</code></pre>\n\n<h3>Função para criar o cookie.</h3>\n<pre class=\"codigo\"><code data-code=\"javaScript\">function setCookie(cname, cvalue, exdays) {\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\n    var expires = \"expires=\"+ d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}</code></pre>\n<h3>Função para obter o cookie.</h3>\n<pre class=\"codigo\"><code data-code=\"javaScript\">function getCookie(cname) {\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) == ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) == 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return \"\";\n}</code></pre>\n\n\n",
            "conteudo_site": "<h2 class=\"sub-titulo\">How to create, access, and delete the cookie in javaScript.</h2>\n<p>Para criar um cookie em javaScript utilize a propriedade <code>document.cookie</code>.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">document.<span style=\"color:#79b6f2\">cookie</span> = <span style=\"color:#2cc160\">\"nomeUsuario=Tiago Jardim\"</span>;</span></code></pre>\n<p>Por padrão o cookie é excluído quando o navegador é fechado. Veja abaixo como adicionar uma data de expiração para o cookie.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">document.<span style=\"color:#79b6f2\">cookie</span> = <span style=\"color:#2cc160\">\"nomeUsuario=Tiago Jardim; expires=Sun Nov 18 2018 20:22:06 GMT-0200\"</span>;</span></code></pre>\n<p>É possível também informar qual é o caminho q o cookie pertence. Por padrão, o cookie pertence à página atual. Veja abaixo como definir o caminho.</p><pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">document.<span style=\"color:#79b6f2\">cookie</span> = <span style=\"color:#2cc160\">\"nomeUsuario=Tiago Jardim; expires=Sun Nov 18 2018 20:22:06 GMT-0200; path=/\"</span>;</span></code></pre>\n<p>Veja abaixo como alterar o cookie em javaScript.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">document.<span style=\"color:#79b6f2\">cookie</span> = <span style=\"color:#2cc160\">\"nomeUsuario=Tiago Carvalho; expires=Sun Nov 18 2018 20:22:06 GMT-0200; path=/\"</span>;</span></code></pre>\n<p>Nesse exemplo vamos mostrar como acessar os dados do cookie.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">var</span> cookie = document.<span style=\"color:#79b6f2\">cookie</span>;</span></code></pre>\n<p>Para excluir o cookie basta alterar a data da expiração passada.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">document.<span style=\"color:#79b6f2\">cookie</span> = <span style=\"color:#2cc160\">\"nomeUsuario=Tiago Carvalho; expires=Sun Nov 18 1994 20:22:06 GMT-0200; path=/\"</span>;</span></code></pre>\n\n<h3>Função para criar o cookie.</h3>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">function</span> setCookie(cname, cvalue, exdays) {<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">var</span> d = <span style=\"color:#c5a5c5\">new</span> Date();<span style=\"color:#79b6f2\">\n</span>    d.<span style=\"color:#79b6f2\">setTime</span>(d.<span style=\"color:#79b6f2\">getTime</span>() + (exdays*<span style=\"color:#79b6f2\">24</span>*<span style=\"color:#79b6f2\">60</span>*<span style=\"color:#79b6f2\">60</span>*<span style=\"color:#79b6f2\">1000</span>));<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">var</span> expires = <span style=\"color:#2cc160\">\"expires=\"</span>+ d.<span style=\"color:#79b6f2\">toUTCString</span>();<span style=\"color:#79b6f2\">\n</span>    document.<span style=\"color:#79b6f2\">cookie</span> = cname + <span style=\"color:#2cc160\">\"=\"</span> + cvalue + <span style=\"color:#2cc160\">\";\"</span> + expires + <span style=\"color:#2cc160\">\";path=/\"</span>;<span style=\"color:#79b6f2\">\n</span>}</span></code></pre>\n<h3>Função para obter o cookie.</h3>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">function</span> getCookie(cname) {<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">var</span> name = cname + <span style=\"color:#2cc160\">\"=\"</span>;<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">var</span> decodedCookie = decodeURIComponent(document.<span style=\"color:#79b6f2\">cookie</span>);<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">var</span> ca = decodedCookie.<span style=\"color:#79b6f2\">split</span>(<span style=\"color:#2cc160\">';'</span>);<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">for</span>(<span style=\"color:#c5a5c5\">var</span> i = <span style=\"color:#79b6f2\">0</span>; i &lt; ca.<span style=\"color:#79b6f2\">length</span>; i++) {<span style=\"color:#79b6f2\">\n</span>        <span style=\"color:#c5a5c5\">var</span> c = ca[i];<span style=\"color:#79b6f2\">\n</span>        <span style=\"color:#c5a5c5\">while</span> (c.<span style=\"color:#79b6f2\">charAt</span>(<span style=\"color:#79b6f2\">0</span>) == <span style=\"color:#2cc160\">' '</span>) {<span style=\"color:#79b6f2\">\n</span>            c = c.<span style=\"color:#79b6f2\">substring</span>(<span style=\"color:#79b6f2\">1</span>);<span style=\"color:#79b6f2\">\n</span>        }<span style=\"color:#79b6f2\">\n</span>        <span style=\"color:#c5a5c5\">if</span> (c.<span style=\"color:#79b6f2\">indexOf</span>(name) == <span style=\"color:#79b6f2\">0</span>) {<span style=\"color:#79b6f2\">\n</span>            <span style=\"color:#c5a5c5\">return</span> c.<span style=\"color:#79b6f2\">substring</span>(name.<span style=\"color:#79b6f2\">length</span>, c.<span style=\"color:#79b6f2\">length</span>);<span style=\"color:#79b6f2\">\n</span>        }<span style=\"color:#79b6f2\">\n</span>    }<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">return</span> <span style=\"color:#2cc160\">\"\"</span>;<span style=\"color:#79b6f2\">\n</span>}</span></code></pre>\n\n\n",
            "descricao": "Nesse exemplo vamos mostrar como criar, acessar e deletar um cookie em javaScript.",
            "description": "Nesse exemplo vamos mostrar como criar, acessar e deletar um cookie em javaScript.",
            "pesquisa": "como criar, acessar e deletar o cookie em javaScript.",
            "title": "Como criar, acessar e deletar o cookie em javaScript.",
            "url": "/-LRcsnsOvErW27Ayomul/como-criar-acessar-deletar-cookie-em-javascript"
            },
             {
            "assunto": [
            {
            "imagem": "/img/javascript.svg",
            "nome": "JavaScript"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">javascript array remove duplicates</h2>\n<p>Nesse exemplo vamos utilizar um <code>arrayList</code> de <code>object</code> para realizar o <code>distinct</code>.</p>\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">var</span> array = [<span style=\"color:#79b6f2\">\n</span>  { <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"Joe\"</span>, <span style=\"color:#2cc160\">\"idade\"</span>: <span style=\"color:#79b6f2\">17</span> },<span style=\"color:#79b6f2\">\n</span>  { <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"Bob\"</span>, <span style=\"color:#2cc160\">\"idade\"</span>: <span style=\"color:#79b6f2\">17</span> },<span style=\"color:#79b6f2\">\n</span>  { <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"Carl\"</span>, <span style=\"color:#2cc160\">\"idade\"</span>: <span style=\"color:#79b6f2\">35</span> }<span style=\"color:#79b6f2\">\n</span>];</span></code></pre>\n<p>Veja o exemplo abaixo de <code>distinct</code> <code>array</code> utilizando javascript pré-ES6.</p>\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">array.<span style=\"color:#79b6f2\">map</span>(item =&gt; item.<span style=\"color:#79b6f2\">idade</span>)<span style=\"color:#79b6f2\">\n</span>  .<span style=\"color:#79b6f2\">filter</span>((value, index, self) =&gt; self.<span style=\"color:#79b6f2\">indexOf</span>(value) === index)\n</span></code></pre>Resultado: [17, 35]\n<p>Veja o exemplo de distinct array javascript</p>\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">array.<span style=\"color:#79b6f2\">map</span>(<span style=\"color:#c5a5c5\">function</span>(item){ <span style=\"color:#c5a5c5\">return</span> item.<span style=\"color:#79b6f2\">idade</span>;} )<span style=\"color:#79b6f2\">\n</span>  .<span style=\"color:#79b6f2\">filter</span>(<span style=\"color:#c5a5c5\">function</span>(value, index, self){ <span style=\"color:#c5a5c5\">return</span> self.<span style=\"color:#79b6f2\">indexOf</span>(value) === index; } )\n</span></code></pre>Resultado: [17, 35]\n",
            "conteudo_site": "<h2 class=\"sub-titulo\">javascript array remove duplicates</h2>\n<p>Nesse exemplo vamos utilizar um <code>arrayList</code> de <code>object</code> para realizar o <code>distinct</code>.</p>\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">var</span> array = [<span style=\"color:#79b6f2\">\n</span>  { <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"Joe\"</span>, <span style=\"color:#2cc160\">\"idade\"</span>: <span style=\"color:#79b6f2\">17</span> },<span style=\"color:#79b6f2\">\n</span>  { <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"Bob\"</span>, <span style=\"color:#2cc160\">\"idade\"</span>: <span style=\"color:#79b6f2\">17</span> },<span style=\"color:#79b6f2\">\n</span>  { <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"Carl\"</span>, <span style=\"color:#2cc160\">\"idade\"</span>: <span style=\"color:#79b6f2\">35</span> }<span style=\"color:#79b6f2\">\n</span>];</span></code></pre>\n<p>Veja o exemplo abaixo de <code>distinct</code> <code>array</code> utilizando javascript pré-ES6.</p>\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">array.<span style=\"color:#79b6f2\">map</span>(item =&gt; item.<span style=\"color:#79b6f2\">idade</span>)<span style=\"color:#79b6f2\">\n</span>  .<span style=\"color:#79b6f2\">filter</span>((value, index, self) =&gt; self.<span style=\"color:#79b6f2\">indexOf</span>(value) === index)\n</span></code></pre>Resultado: [17, 35]\n<p>Veja o exemplo de distinct array javascript</p>\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">array.<span style=\"color:#79b6f2\">map</span>(<span style=\"color:#c5a5c5\">function</span>(item){ <span style=\"color:#c5a5c5\">return</span> item.<span style=\"color:#79b6f2\">idade</span>;} )<span style=\"color:#79b6f2\">\n</span>  .<span style=\"color:#79b6f2\">filter</span>(<span style=\"color:#c5a5c5\">function</span>(value, index, self){ <span style=\"color:#c5a5c5\">return</span> self.<span style=\"color:#79b6f2\">indexOf</span>(value) === index; } )\n</span></code></pre>Resultado: [17, 35]\n",
            "descricao": "Veja um exemplo de como tirar duplicação de um arraylist de objetos javascript. distinct array object javascript.",
            "description": "Veja um exemplo de como tirar duplicação de um arraylist de objetos javascript. distinct array object javascript.",
            "pesquisa": "como tirar duplicação do arraylist javascript, distinct array object javascript",
            "title": "Como tirar duplicação do arraylist javascript, distinct array object javascript",
            "url": "/-LQy-jiTKWGSq7TULXUw/como-tirar-duplicacao-arraylist-javascript-distinct-array-object"
            },
           {
            "assunto": [
            {
            "imagem": "/img/sql-server.svg",
            "nome": "SQL Server"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">Formartar data sql server</h2>\n\n<p>Veja o exemplo abaixo de como formatar data usando convert.</p>\n\n<pre class=\"codigo\"><code data-code=\"SQL\">print convert(varchar,getdate(), 103)<br/>--// Resultado       22/10/2018</code></pre>\n\n<p>Nesse exemplo vamos mostrar como formatar data e hora.</p>       \n<pre class=\"codigo\"><code data-code=\"SQL\">print convert(varchar,getdate(), 103) +' '+convert(varchar,getdate(), 108)<br/>--// Resultado      22/10/2018 19:42:00</code></pre>\n\n",
            "conteudo_site": "<h2 class=\"sub-titulo\">Formartar data sql server</h2>\n\n<p>Veja o exemplo abaixo de como formatar data usando convert.</p>\n\n<pre class=\"codigo\"><code data-code=\"SQL\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">print convert(varchar,getdate(), <span style=\"color:#79b6f2\">103</span>)<br>--<span style=\"color:green\">// Resultado       22/10/2018</span></span></code></pre>\n\n<p>Nesse exemplo vamos mostrar como formatar data e hora.</p>       \n<pre class=\"codigo\"><code data-code=\"SQL\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">print convert(varchar,getdate(), <span style=\"color:#79b6f2\">103</span>) +<span style=\"color:#2cc160\">' '</span>+convert(varchar,getdate(), <span style=\"color:#79b6f2\">108</span>)<br>--<span style=\"color:green\">// Resultado      22/10/2018 19:42:00</span></span></code></pre>\n\n",
            "descricao": "Veja no guia do desenvolvedor exemplos de como formatar data no sql server usando convert.",
            "description": "Veja no guia do desenvolvedor exemplos de como formatar data no sql server usando convert.",
            "pesquisa": "como formatar data sql server português brasil dd/mm/yyyy",
            "title": "Como formatar data sql server português brasil dd/mm/yyyy",
            "url": "/-LPSX8SsoY6MOaqITqT5/Como-formatar-data-sql-server-portugues-brasil"
            },
           {
            "assunto": [
            {
            "imagem": "/img/javascript.svg",
            "nome": "JavaScript"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">remove item array javascript</h2>\n\n<p>Utilize essa <code>function</code> para remover item da lista, \n\npasse nos parametros a lista e o valor que deseja remover e ela vai retornar a lista sem o elemento informado.\n\n<pre class=\"codigo\"><code data-code=\"javaScript\">function arrayRemove(array, value) {\n    return array.filter(function (ele) {\n        return ele != value;\n    });\n}</code></pre>\n\n<p>Exemplo de utilização</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\">var lista = [1, 2, 3, 4];\nlista = arrayRemove(lista, 2);\n\n</code></pre>",
            "conteudo_site": "<h2 class=\"sub-titulo\">remove item array javascript</h2>\n\n<p>Utilize essa <code>function</code> para remover item da lista, \n\npasse nos parametros a lista e o valor que deseja remover e ela vai retornar a lista sem o elemento informado.\n\n</p><pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">function</span> arrayRemove(array, value) {<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">return</span> array.<span style=\"color:#79b6f2\">filter</span>(<span style=\"color:#c5a5c5\">function</span> (ele) {<span style=\"color:#79b6f2\">\n</span>        <span style=\"color:#c5a5c5\">return</span> ele != value;<span style=\"color:#79b6f2\">\n</span>    });<span style=\"color:#79b6f2\">\n</span>}</span></code></pre>\n\n<p>Exemplo de utilização</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">var</span> lista = [<span style=\"color:#79b6f2\">1</span>, <span style=\"color:#79b6f2\">2</span>, <span style=\"color:#79b6f2\">3</span>, <span style=\"color:#79b6f2\">4</span>];\nlista = arrayRemove(lista, <span style=\"color:#79b6f2\">2</span>);\n\n</span></code></pre>",
            "descricao": "Veja exemplo de como remover item do array list javascript(remove item array javascript). Guia do desenvolvedor.",
            "description": "Veja exemplo de como remover item do array list javascript(remove item array javascript). Guia do desenvolvedor.",
            "pesquisa": "como remover item da lista em javascript",
            "title": "Como remover item da lista em javascript",
            "url": "/-LPghCdZYshV1CoR9Reo/como-remover-item-da-lista-javascript"
            },
            {
            "assunto": [
            {
            "imagem": "/img/react.svg",
            "nome": "React js"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">React map array render</h2><p>Nesse exemplo vamos usar o <code>map()</code> para exibir no console um vetor de números multiplicados por 2.</p>\n<pre class=\"codigo\"><code data-code=\"React\">const lista_numeros= [1, 2, 3, 4, 5, 7 ,8 , 9, 10];<br>const lista_valores= lista_numeros.map((number) => number * 2);<br>console.log(lista_valores);</code></pre>\n<p>Este código registra <code>[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</code> no console.</p><p>Agora vamos usar <code>map()</code> em uma lista de objeto, para exibir no console uma lista de nome de produtos</p>\n<pre class=\"codigo\"><code data-code=\"React\">const lista_produto= [{\"id\":\"1\", \"nome\": \"protudo 1\"}, {\"id\":\"2\", \"nome\": \"protudo 2\"}, {\"id\":\"3\", \"nome\": \"protudo 3\"},{\"id\":\"4\", \"nome\": \"protudo 4\"}];<br>const lista_nomes = lista_produto.map((item) => item.nome);<br>console.log(lista_nomes);</code></pre>\n<p>Este código registra <code>[\"protudo 1\", \"protudo 2\", \"protudo 3\", \"protudo 4\"]</code> no console.</p><p>Abaixo, percorremos o array usando o <code>map()</code> para renderizar uma lista de nome de produtos no componente. Você pode criar coleções de elementos e incluí-las no JSX usando chaves <code>{}</code>.</p>\n<pre class=\"codigo\"><code data-code=\"React\">const lista_produto= [{\"id\":\"1\", \"nome\": \"protudo 1\"}, {\"id\":\"2\", \"nome\": \"protudo 2\"}, {\"id\":\"3\", \"nome\": \"protudo 3\"},{\"id\":\"4\", \"nome\": \"protudo 4\"}];<br>const lista_nomes = lista_produto.map((item) =>  &lt;li&gt;{item.nome}&lt;li&gt;);<br>ReactDOM.render(&lt;ul&gt;{lista_nomes} &lt;/ul&gt;,<br>  document.getElementById('root'));</code></pre>\n<p>Este código exibe uma lista de marcadores com os nomes dos produtos.</p><p>Quando você executar esse código, receberá um aviso de que uma chave deve ser fornecida para itens da lista. As chaves ajudam o Reagir a identificar quais itens foram alterados, adicionados ou removidos. As chaves devem ser dadas aos elementos dentro da matriz para dar aos elementos uma identidade.</p><p>Nesse exemplo vamos mpstrar como utilizar o <code>key</code> no <code>map()</code>.\n<pre class=\"codigo\"><code data-code=\"React\">const lista_produto= [{\"id\":\"1\", \"nome\": \"protudo 1\"}, {\"id\":\"2\", \"nome\": \"protudo 2\"}, {\"id\":\"3\", \"nome\": \"protudo 3\"},{\"id\":\"4\", \"nome\": \"protudo 4\"}];<br>const lista_nomes = lista_produto.map((item) =>  &lt;li key={item.id}&gt;{item.nome}&lt;/li&gt;);\n\n</code></pre>",
            "conteudo_site": "<h2 class=\"sub-titulo\">React map array render</h2><p>Nesse exemplo vamos usar o <code>map()</code> para exibir no console um vetor de números multiplicados por 2.</p>\n<pre class=\"codigo\"><code data-code=\"React\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">const</span> lista_numeros= [<span style=\"color:#79b6f2\">1</span>, <span style=\"color:#79b6f2\">2</span>, <span style=\"color:#79b6f2\">3</span>, <span style=\"color:#79b6f2\">4</span>, <span style=\"color:#79b6f2\">5</span>, <span style=\"color:#79b6f2\">7</span> ,<span style=\"color:#79b6f2\">8</span> , <span style=\"color:#79b6f2\">9</span>, <span style=\"color:#79b6f2\">10</span>];<br><span style=\"color:#c5a5c5\">const</span> lista_valores= lista_numeros.<span style=\"color:#79b6f2\">map</span>((number) =&gt; number * <span style=\"color:#79b6f2\">2</span>);<br>console.<span style=\"color:#79b6f2\">log</span>(lista_valores);</span></code></pre>\n<p>Este código registra <code>[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</code> no console.</p><p>Agora vamos usar <code>map()</code> em uma lista de objeto, para exibir no console uma lista de nome de produtos</p>\n<pre class=\"codigo\"><code data-code=\"React\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">const</span> lista_produto= [{<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"1\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 1\"</span>}, {<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"2\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 2\"</span>}, {<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"3\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 3\"</span>},{<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"4\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 4\"</span>}];<br><span style=\"color:#c5a5c5\">const</span> lista_nomes = lista_produto.<span style=\"color:#79b6f2\">map</span>((item) =&gt; item.<span style=\"color:#79b6f2\">nome</span>);<br>console.<span style=\"color:#79b6f2\">log</span>(lista_nomes);</span></code></pre>\n<p>Este código registra <code>[\"protudo 1\", \"protudo 2\", \"protudo 3\", \"protudo 4\"]</code> no console.</p><p>Abaixo, percorremos o array usando o <code>map()</code> para renderizar uma lista de nome de produtos no componente. Você pode criar coleções de elementos e incluí-las no JSX usando chaves <code>{}</code>.</p>\n<pre class=\"codigo\"><code data-code=\"React\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">const</span> lista_produto= [{<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"1\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 1\"</span>}, {<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"2\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 2\"</span>}, {<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"3\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 3\"</span>},{<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"4\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 4\"</span>}];<br><span style=\"color:#c5a5c5\">const</span> lista_nomes = lista_produto.<span style=\"color:#79b6f2\">map</span>((item) =&gt;  <span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>li<span style=\"color:#73c6b3\">&gt;</span></span>{item.<span style=\"color:#79b6f2\">nome</span>}<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>li<span style=\"color:#73c6b3\">&gt;</span></span>);<br>ReactDOM.<span style=\"color:#79b6f2\">render</span>(<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>ul<span style=\"color:#73c6b3\">&gt;</span></span>{lista_nomes} <span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>/ul<span style=\"color:#73c6b3\">&gt;</span></span>,<br>  document.<span style=\"color:#79b6f2\">getElementById</span>(<span style=\"color:#2cc160\">'root'</span>));</span></code></pre>\n<p>Este código exibe uma lista de marcadores com os nomes dos produtos.</p><p>Quando você executar esse código, receberá um aviso de que uma chave deve ser fornecida para itens da lista. As chaves ajudam o Reagir a identificar quais itens foram alterados, adicionados ou removidos. As chaves devem ser dadas aos elementos dentro da matriz para dar aos elementos uma identidade.</p><p>Nesse exemplo vamos mpstrar como utilizar o <code>key</code> no <code>map()</code>.\n</p><pre class=\"codigo\"><code data-code=\"React\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">const</span> lista_produto= [{<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"1\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 1\"</span>}, {<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"2\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 2\"</span>}, {<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"3\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 3\"</span>},{<span style=\"color:#2cc160\">\"id\"</span>:<span style=\"color:#2cc160\">\"4\"</span>, <span style=\"color:#2cc160\">\"nome\"</span>: <span style=\"color:#2cc160\">\"protudo 4\"</span>}];<br><span style=\"color:#c5a5c5\">const</span> lista_nomes = lista_produto.<span style=\"color:#79b6f2\">map</span>((item) =&gt;  <span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>li<span style=\"color:#c5a5c5\"> key<span style=\"color:#c5a5c5\">={item.<span style=\"color:#79b6f2\">id</span>}</span><span style=\"color:#73c6b3\">&gt;</span></span>{item.<span style=\"color:#79b6f2\">nome</span>}<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>/li<span style=\"color:#73c6b3\">&gt;</span></span>);\n\n</span></span></code></pre>",
            "descricao": "Nesse tutorial vamos mostrar como usar map no react js.",
            "description": "Nesse tutorial vamos mostrar como usar map no react js. Map é semelhante ao foreach, for e while. Se seu map não funciona veja como resolver",
            "pesquisa": "como utilizar map react array list exemplo",
            "search": "map",
            "title": "Como utilizar map react array list exemplo",
            "url": "/-LPMD-E00NEzPsY3N77F/como-utilizar-map-react-array-list"
            },
             {
            "assunto": [
            {
            "imagem": "/img/javascript.svg",
            "nome": "JavaScript"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">How to check if browser location is active in javaScript</h2>\n<p>Nesse exemplo vamos mostrar como verificar se a localização do navegador está ativa.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">navigator.permissions.query({ 'name': 'geolocation' }).then(function (permission) { \n  if(permission.state == \"granted\") \n      console.log(\"Localização ativa\") \n});</code></pre>\n<p>Nesse exemplo vamos verificar se a localização do seu navegador foi bloqueada pelo usuário.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">navigator.permissions.query({ 'name': 'geolocation' }).then(function (permission) { \n  if(permission.state == \"denied\") \n      console.log(\"Localização bloqueada pelo usuário.\") \n});</code></pre>\n\n\n",
            "conteudo_site": "<h2 class=\"sub-titulo\">How to check if browser location is active in javaScript</h2>\n<p>Nesse exemplo vamos mostrar como verificar se a localização do navegador está ativa.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">navigator.<span style=\"color:#79b6f2\">permissions</span>.<span style=\"color:#79b6f2\">query</span>({ <span style=\"color:#2cc160\">'name'</span>: <span style=\"color:#2cc160\">'geolocation'</span> }).<span style=\"color:#79b6f2\">then</span>(<span style=\"color:#c5a5c5\">function</span> (permission) { <span style=\"color:#79b6f2\">\n</span>  <span style=\"color:#c5a5c5\">if</span>(permission.<span style=\"color:#79b6f2\">state</span> == <span style=\"color:#2cc160\">\"granted\"</span>) <span style=\"color:#79b6f2\">\n</span>      console.<span style=\"color:#79b6f2\">log</span>(<span style=\"color:#2cc160\">\"Localização ativa\"</span>) <span style=\"color:#79b6f2\">\n</span>});</span></code></pre>\n<p>Nesse exemplo vamos verificar se a localização do seu navegador foi bloqueada pelo usuário.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">navigator.<span style=\"color:#79b6f2\">permissions</span>.<span style=\"color:#79b6f2\">query</span>({ <span style=\"color:#2cc160\">'name'</span>: <span style=\"color:#2cc160\">'geolocation'</span> }).<span style=\"color:#79b6f2\">then</span>(<span style=\"color:#c5a5c5\">function</span> (permission) { <span style=\"color:#79b6f2\">\n</span>  <span style=\"color:#c5a5c5\">if</span>(permission.<span style=\"color:#79b6f2\">state</span> == <span style=\"color:#2cc160\">\"denied\"</span>) <span style=\"color:#79b6f2\">\n</span>      console.<span style=\"color:#79b6f2\">log</span>(<span style=\"color:#2cc160\">\"Localização bloqueada pelo usuário.\"</span>) <span style=\"color:#79b6f2\">\n</span>});</span></code></pre>\n\n\n",
            "descricao": "Veja como verificar se a localização do navegador está ativa em javaScript, veja também quais são os estado da localização do navegador.",
            "description": "Veja como verificar se a localização do navegador está ativa em javaScript, veja também quais são os estado da localização do navegador.",
            "pesquisa": "como verificar se a localização do navegador esta ativa em javaScript",
            "title": "Como verificar se a localização do navegador esta ativa em javaScript",
            "url": "/-LRd-cE2T4HN8gqxL1FO/como-verificar-se-a-localizacao-do-navegador-esta-ativa-em-javascript"
            },
             {
            "assunto": [
            {
            "imagem": "/img/sql-server.svg",
            "nome": "SQL Server"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">SQL Server Cursor Example</h2>\n<p>Veja abaixo como criar um <code>cursor</code> SQL server.</p>\n<pre class=\"codigo\"><code data-code=\"SQL\">DECLARE @name VARCHAR(50)\n\nDECLARE db_cursor CURSOR FOR \n\tselect name from tb_usuario\nOPEN db_cursor  \nFETCH NEXT FROM db_cursor INTO @name  \n\nWHILE @@FETCH_STATUS = 0  \nBEGIN  \n   print @name\n    /*insert, update ou delete*/\n    FETCH NEXT FROM db_cursor INTO @name \nEND \n\nCLOSE db_cursor  \nDEALLOCATE db_cursor \n</code></pre>\n<p><strong>Componentes do cursor do SQL Server</strong></p>\n<p>Com base no exemplo acima, o cursor incluem esses componentes:</p>\n<li>DECLARE statements - Declarar variáveis ​​usadas no bloco de códigos</li>\n<li>SET\\SELECT statements - Inicializa as variáveis ​​para um valor específico</li>\n<li>DECLARE CURSOR statement - Preencha o cursor com valores que serão avaliados\n\t<ul>\n\t\t<li>NOTA - Há um número igual de variáveis ​​no <code>DECLARE CURSOR FOR</code> instrução como existem na instrução <code>SELECT</code>. Isso pode ser 1 ou muitas variáveis ​​e colunas associadas.</li>\n\t</ul>\n</li>\n<li>OPEN statement - Abre o cursor para iniciar o processamento de dados</li>\n<li>FETCH NEXT statements - Atribua os valores específicos do cursor às variáveis\n\t<ul>\n\t\t<li>NOTA - Essa lógica é usada para o preenchimento inicial antes da instrução <code>WHILE</code> e, em seguida, novamente durante cada loop no processo como uma parte da instrução <code>WHILE</code></li>\n\t</ul>\n</li>\n<li>WHILE statement - Condição para iniciar e continuar o processamento de dados</li>\n<li>BEGIN...END statement - Início e fim do bloco de código</li>\n<li>CLOSE statement - Libera os dados atuais e os bloqueios associados, mas permite que o cursor seja reaberto</li>\n<li>DEALLOCATE statement - Destrói o cursor</li>\n",
            "conteudo_site": "<h2 class=\"sub-titulo\">SQL Server Cursor Example</h2>\n<p>Veja abaixo como criar um <code>cursor</code> SQL server.</p>\n<pre class=\"codigo\"><code data-code=\"SQL\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">DECLARE @name VARCHAR(<span style=\"color:#79b6f2\">50</span>)\n\nDECLARE db_cursor CURSOR FOR \n\tselect name from tb_usuario\nOPEN db_cursor  \nFETCH NEXT FROM db_cursor INTO @name  \n\nWHILE @@FETCH_STATUS = <span style=\"color:#79b6f2\">0</span>  \nBEGIN  <span style=\"color:#79b6f2\">\n</span>   print @name\n    <span style=\"color:green\">/*insert, update ou delete*/</span><span style=\"color:#79b6f2\">\n</span>    FETCH NEXT FROM db_cursor INTO @name \nEND \n\nCLOSE db_cursor  \nDEALLOCATE db_cursor \n</span></code></pre>\n<p><strong>Componentes do cursor do SQL Server</strong></p>\n<p>Com base no exemplo acima, o cursor incluem esses componentes:</p>\n<li>DECLARE statements - Declarar variáveis ​​usadas no bloco de códigos</li>\n<li>SET\\SELECT statements - Inicializa as variáveis ​​para um valor específico</li>\n<li>DECLARE CURSOR statement - Preencha o cursor com valores que serão avaliados\n\t<ul>\n\t\t<li>NOTA - Há um número igual de variáveis ​​no <code>DECLARE CURSOR FOR</code> instrução como existem na instrução <code>SELECT</code>. Isso pode ser 1 ou muitas variáveis ​​e colunas associadas.</li>\n\t</ul>\n</li>\n<li>OPEN statement - Abre o cursor para iniciar o processamento de dados</li>\n<li>FETCH NEXT statements - Atribua os valores específicos do cursor às variáveis\n\t<ul>\n\t\t<li>NOTA - Essa lógica é usada para o preenchimento inicial antes da instrução <code>WHILE</code> e, em seguida, novamente durante cada loop no processo como uma parte da instrução <code>WHILE</code></li>\n\t</ul>\n</li>\n<li>WHILE statement - Condição para iniciar e continuar o processamento de dados</li>\n<li>BEGIN...END statement - Início e fim do bloco de código</li>\n<li>CLOSE statement - Libera os dados atuais e os bloqueios associados, mas permite que o cursor seja reaberto</li>\n<li>DEALLOCATE statement - Destrói o cursor</li>\n",
            "descricao": "Veja exemplo de como criar cursor sql server",
            "description": "Veja exemplo de como criar cursor sql server while com update, insert e delete. Sql server cursor example.",
            "pesquisa": "como criar cursor sql server",
            "title": "Exemplo de como criar cursor sql server",
            "url": "/-LRkxOGXusXNXwua7q6R/exemplo-de-como-criar-cursor-sql-server"
            },
            {
            "assunto": [
            {
            "imagem": "/img/react.svg",
            "nome": "React js"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">Iniciando app react js</h2><p>React js é uma biblioteca javaScript mais popular da atualidade, criado pelo Facebook para construir interfaces de usuário. Nesse tutorial vamos mostrar como criar um app react js.</p><p><strong>Pré-requisito</strong><br/>Será necessário ter instalado na sua maquina o <a href=\"https://nodejs.org/en/download/\" title=\"Download Node.js\" target=\"_blank\" rel=\"nofollow\">Node.js</a> </p><p>Para criar app react execute o seguinte comando, esses comandos funcionam no macOS, Windows e Linux.</p>\n<pre class=\"codigo\"><code data-code=\"React\">npx create-react-app my-app</code></pre>\n<p>Ele irá criar um pasta chamado my-app dentro do diretório onde o comando foi executado. Dentro desse diretório, ele gerará a estrutura inicial do projeto e instalará as dependências necessárias:</p><pre><code>my-app<br>├── README.md<br>├── node_modules<br>├── package.json<br>├── .gitignore<br>├── public<br>│   ├── favicon.ico<br>│   ├── index.html<br>│   └── manifest.json<br>└── src<br>    ├── App.css<br>    ├── App.js<br>    ├── App.test.js<br>    ├── index.css<br>    ├── index.js<br>    ├── logo.svg<br>    └── serviceWorker.js</code></pre><p>Para iniciar o app react, será necessário abrir a pasta onde o app foi criado e executar o seguinte comando.</p>\n<pre class=\"codigo\"><code data-code=\"React\">cd my-appnpm start</code></pre>\n<p>Em seguida, abra <code>http://localhost:3000/</code> para ver seu aplicativo.</p><p>Para gerar a Build do app basta executar o seguinte comando</p>\n<pre class=\"codigo\"><code data-code=\"React\">npm run build</code></pre>",
            "conteudo_site": "<h2 class=\"sub-titulo\">Iniciando app react js</h2><p>React js é uma biblioteca javaScript mais popular da atualidade, criado pelo Facebook para construir interfaces de usuário. Nesse tutorial vamos mostrar como criar um app react js.</p><p><strong>Pré-requisito</strong><br>Será necessário ter instalado na sua maquina o <a href=\"https://nodejs.org/en/download/\" title=\"Download Node.js\" target=\"_blank\" rel=\"nofollow\">Node.js</a> </p><p>Para criar app react execute o seguinte comando, esses comandos funcionam no macOS, Windows e Linux.</p>\n<pre class=\"codigo\"><code data-code=\"React\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">npx create-react-app my-app</span></code></pre>\n<p>Ele irá criar um pasta chamado my-app dentro do diretório onde o comando foi executado. Dentro desse diretório, ele gerará a estrutura inicial do projeto e instalará as dependências necessárias:</p><pre><code>my-app<br>├── README.md<br>├── node_modules<br>├── package.json<br>├── .gitignore<br>├── public<br>│   ├── favicon.ico<br>│   ├── index.html<br>│   └── manifest.json<br>└── src<br>    ├── App.css<br>    ├── App.js<br>    ├── App.test.js<br>    ├── index.css<br>    ├── index.js<br>    ├── logo.svg<br>    └── serviceWorker.js</code></pre><p>Para iniciar o app react, será necessário abrir a pasta onde o app foi criado e executar o seguinte comando.</p>\n<pre class=\"codigo\"><code data-code=\"React\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">cd my-appnpm start</span></code></pre>\n<p>Em seguida, abra <code>http://localhost:3000/</code> para ver seu aplicativo.</p><p>Para gerar a Build do app basta executar o seguinte comando</p>\n<pre class=\"codigo\"><code data-code=\"React\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">npm run build</span></code></pre>",
            "descricao": "Veja como criar app react js. Vamos mostrar comando para criar app react desde o início.",
            "description": "Veja como criar app react js. Vamos mostrar comando para criar app react desde o início. Comando para criar react não funciona veja o porque",
            "pesquisa": "como criar site react js",
            "title": "Como criar site react js",
            "url": "/-LPMDGIbM5cUmW9tV8HF/como-criar-site-react-js"
            },
             {
            "assunto": [
            {
            "imagem": "/img/sql-server.svg",
            "nome": "SQL Server"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">Create table sql server identity</h2>\n<p>A instrução <code>create table</code> é usada para criar uma nova tabela em um banco de dados. Veja a sintaxe abaixo.</p>\n<pre class=\"codigo\"><code data-code=\"SQL\">CREATE TABLE table_name (\n    column1 datatype,\n    column2 datatype,\n    column3 datatype,\n   ....\n);</code></pre>\n<p>Exemplo SQL <code>create table</code>.</p>\n<pre class=\"codigo\"><code data-code=\"SQL\">CREATE TABLE tb_pessoa (\n    id int,\n    nome varchar(255),\n    sobrenome varchar(255),\n    cidade varchar(255),\n    endereco varchar(255)\n\n);</code></pre>\n<p>Para criar uma tabela com um campo auto incremento basta usar o seguinte código <code>identity</code> na frente do campo.</p>\n<pre class=\"codigo\"><code data-code=\"SQL\">CREATE TABLE tb_pessoa (\n    id int identity(1,1),\n    nome varchar(255),\n    sobrenome varchar(255),\n    cidade varchar(255),\n    endereco varchar(255)\n);</code></pre>",
            "conteudo_site": "<h2 class=\"sub-titulo\">Create table sql server identity</h2>\n<p>A instrução <code>create table</code> é usada para criar uma nova tabela em um banco de dados. Veja a sintaxe abaixo.</p>\n<pre class=\"codigo\"><code data-code=\"SQL\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">CREATE TABLE table_name (<span style=\"color:#79b6f2\">\n</span>    column1 datatype,<span style=\"color:#79b6f2\">\n</span>    column2 datatype,<span style=\"color:#79b6f2\">\n</span>    column3 datatype,<span style=\"color:#79b6f2\">\n</span>   .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\">\n</span>);</span></code></pre>\n<p>Exemplo SQL <code>create table</code>.</p>\n<pre class=\"codigo\"><code data-code=\"SQL\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">CREATE TABLE tb_pessoa (<span style=\"color:#79b6f2\">\n</span>    id <span style=\"color:#c5a5c5\">int</span>,<span style=\"color:#79b6f2\">\n</span>    nome varchar(<span style=\"color:#79b6f2\">255</span>),<span style=\"color:#79b6f2\">\n</span>    sobrenome varchar(<span style=\"color:#79b6f2\">255</span>),<span style=\"color:#79b6f2\">\n</span>    cidade varchar(<span style=\"color:#79b6f2\">255</span>),<span style=\"color:#79b6f2\">\n</span>    endereco varchar(<span style=\"color:#79b6f2\">255</span>)<span style=\"color:#79b6f2\">\n\n</span>);</span></code></pre>\n<p>Para criar uma tabela com um campo auto incremento basta usar o seguinte código <code>identity</code> na frente do campo.</p>\n<pre class=\"codigo\"><code data-code=\"SQL\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">CREATE TABLE tb_pessoa (<span style=\"color:#79b6f2\">\n</span>    id <span style=\"color:#c5a5c5\">int</span> identity(<span style=\"color:#79b6f2\">1</span>,<span style=\"color:#79b6f2\">1</span>),<span style=\"color:#79b6f2\">\n</span>    nome varchar(<span style=\"color:#79b6f2\">255</span>),<span style=\"color:#79b6f2\">\n</span>    sobrenome varchar(<span style=\"color:#79b6f2\">255</span>),<span style=\"color:#79b6f2\">\n</span>    cidade varchar(<span style=\"color:#79b6f2\">255</span>),<span style=\"color:#79b6f2\">\n</span>    endereco varchar(<span style=\"color:#79b6f2\">255</span>)<span style=\"color:#79b6f2\">\n</span>);</span></code></pre>",
            "descricao": "No Guia do desenvolvedor você encontra exemplos de como criar tabela com auto incremento no SQL Server.",
            "description": "No Guia do desenvolvedor você encontra exemplos de como criar tabela com auto incremento no SQL Server.",
            "pesquisa": "como criar tabela SQL server e definir um campo como auto incremento",
            "title": "Como criar tabela SQL server e definir um campo como auto incremento",
            "url": "/-LPhYg7B6mPdu9ZQ4n-W/como-criar-tabela-sql-server-e-definir-um-campo-como-auto-incremento"
            },
             {
            "assunto": [
            {
            "imagem": "/img/node.js.svg",
            "nome": "Node.js"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">Como configurar rotas node js</h2><p>node.js é uma plataforma para desenvolvimento de aplicações no lado do servidor, também conhecido como back-end, baseadas em rede construída sobre o motor javaScript V8.</p><p>Para criar um servidor node.js será necessário instalar <a href=\"https://nodejs.org/en/download/\" title=\"Download Node.js\" target=\"_blank\" rel=\"nofollow\">node.js</a></p><p>Vamos criar um arquivo chamado <code>server.js</code> no seguinte diretório <code>documents</code>. Dentro desse arquivo vamos por o seguinte código.</p>\n<pre class=\"codigo\"><code data-code=\"node\">const http = require('http')<br>const port = 3000<br>const ip = 'localhost'<br>const server = http.createServer((req, res) => {  <br>console.log('Recebendo request!')<br>  res.end('&lt;h1&gt;Hello world!&lt;/h1&gt;')<br>})<br>server.listen(port, ip, () => {  <br>console.log(`Servidor está escutando na porta ${port}`)<br>  console.log('Comando para parar o servidor  ctrl + c');<br>})</code></pre>\n<p>Agora o servidor já está criado, para executar o servidor, abra o prompt de comando e digite o seguinte comando <code>cd documents</code> para abrir o diretório onde está <code>server.js</code>. Digite o seguinte comando para iniciar o servidor.</p>\n<pre class=\"codigo\"><code data-code=\"node\">node server.js</code></pre>\n<p>Abra o seu navegador e acesse <code>http://localhost:3000</code>, observe que o conteúdo da sua página vai estar com o texto <code>hello world!</code></p><h2 class=\"sub-titulo\">Criando rotas para o servidor node.js</h2><p>Todas requisições feitas no servidor http são passadas pelo <code>createServer</code>, portando vamos colocar as condições de redirecionamento lá dentro.</p>\n<pre class=\"codigo\"><code data-code=\"node\">const http = require('http')<br>const port = 3000<br>const ip = 'localhost'<br>const server = http.createServer((req, res) => {<br>  if (req.url == '/') {<br>    res.end('&lt;h1&gt;Home&lt;/h1&gt;')<br>  }<br>  if (req.url == '/quemsomos') {<br>    res.end('&lt;h1&gt;Quem somos&lt;/h1&gt;')<br>  }<br>  if (req.url == '/ajuda') {<br>    res.end('&lt;h1&gt;ajuda&lt;/h1&gt;')<br>  }<br>  if (req.url == '/contato') {<br>    res.end('&lt;h1&gt;Contato&lt;/h1&gt;')<br>  }<br>  res.end('&lt;h1&gt;Página não encontrada!&lt;/h1&gt;')<br>})<br>server.listen(port, ip, () => {<br>  console.log(`Servidor está escutando na porta ${port}`)<br>  console.log('Comando para parar o servidor  ctrl + c');<br>})</code></pre>",
            "conteudo_site": "<h2 class=\"sub-titulo\">Como configurar rotas node js</h2><p>node.js é uma plataforma para desenvolvimento de aplicações no lado do servidor, também conhecido como back-end, baseadas em rede construída sobre o motor javaScript V8.</p><p>Para criar um servidor node.js será necessário instalar <a href=\"https://nodejs.org/en/download/\" title=\"Download Node.js\" target=\"_blank\" rel=\"nofollow\">node.js</a></p><p>Vamos criar um arquivo chamado <code>server.js</code> no seguinte diretório <code>documents</code>. Dentro desse arquivo vamos por o seguinte código.</p>\n<pre class=\"codigo\"><code data-code=\"node\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">const</span> http = require(<span style=\"color:#2cc160\">'http'</span>)<br><span style=\"color:#c5a5c5\">const</span> port = <span style=\"color:#79b6f2\">3000</span><br><span style=\"color:#c5a5c5\">const</span> ip = <span style=\"color:#2cc160\">'localhost'</span><br><span style=\"color:#c5a5c5\">const</span> server = http.<span style=\"color:#79b6f2\">createServer</span>((req, res) =&gt; {  <br>console.<span style=\"color:#79b6f2\">log</span>(<span style=\"color:#2cc160\">'Recebendo request!'</span>)<br>  res.<span style=\"color:#79b6f2\">end</span>(<span style=\"color:#2cc160\">'<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>h1<span style=\"color:#73c6b3\">&gt;</span></span>Hello world!<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>/h1<span style=\"color:#73c6b3\">&gt;</span></span>'</span>)<br>})<br>server.<span style=\"color:#79b6f2\">listen</span>(port, ip, () =&gt; {  <br>console.<span style=\"color:#79b6f2\">log</span>(`Servidor está escutando na porta ${port}`)<br>  console.<span style=\"color:#79b6f2\">log</span>(<span style=\"color:#2cc160\">'Comando para parar o servidor  ctrl + c'</span>);<br>})</span></code></pre>\n<p>Agora o servidor já está criado, para executar o servidor, abra o prompt de comando e digite o seguinte comando <code>cd documents</code> para abrir o diretório onde está <code>server.js</code>. Digite o seguinte comando para iniciar o servidor.</p>\n<pre class=\"codigo\"><code data-code=\"node\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">node server.js</span></code></pre>\n<p>Abra o seu navegador e acesse <code>http://localhost:3000</code>, observe que o conteúdo da sua página vai estar com o texto <code>hello world!</code></p><h2 class=\"sub-titulo\">Criando rotas para o servidor node.js</h2><p>Todas requisições feitas no servidor http são passadas pelo <code>createServer</code>, portando vamos colocar as condições de redirecionamento lá dentro.</p>\n<pre class=\"codigo\"><code data-code=\"node\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">const</span> http = require(<span style=\"color:#2cc160\">'http'</span>)<br><span style=\"color:#c5a5c5\">const</span> port = <span style=\"color:#79b6f2\">3000</span><br><span style=\"color:#c5a5c5\">const</span> ip = <span style=\"color:#2cc160\">'localhost'</span><br><span style=\"color:#c5a5c5\">const</span> server = http.<span style=\"color:#79b6f2\">createServer</span>((req, res) =&gt; {<br>  <span style=\"color:#c5a5c5\">if</span> (req.<span style=\"color:#79b6f2\">url</span> == <span style=\"color:#2cc160\">'/'</span>) {<br>    res.<span style=\"color:#79b6f2\">end</span>(<span style=\"color:#2cc160\">'<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>h1<span style=\"color:#73c6b3\">&gt;</span></span>Home<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>/h1<span style=\"color:#73c6b3\">&gt;</span></span>'</span>)<br>  }<br>  <span style=\"color:#c5a5c5\">if</span> (req.<span style=\"color:#79b6f2\">url</span> == <span style=\"color:#2cc160\">'/quemsomos'</span>) {<br>    res.<span style=\"color:#79b6f2\">end</span>(<span style=\"color:#2cc160\">'<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>h1<span style=\"color:#73c6b3\">&gt;</span></span>Quem somos<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>/h1<span style=\"color:#73c6b3\">&gt;</span></span>'</span>)<br>  }<br>  <span style=\"color:#c5a5c5\">if</span> (req.<span style=\"color:#79b6f2\">url</span> == <span style=\"color:#2cc160\">'/ajuda'</span>) {<br>    res.<span style=\"color:#79b6f2\">end</span>(<span style=\"color:#2cc160\">'<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>h1<span style=\"color:#73c6b3\">&gt;</span></span>ajuda<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>/h1<span style=\"color:#73c6b3\">&gt;</span></span>'</span>)<br>  }<br>  <span style=\"color:#c5a5c5\">if</span> (req.<span style=\"color:#79b6f2\">url</span> == <span style=\"color:#2cc160\">'/contato'</span>) {<br>    res.<span style=\"color:#79b6f2\">end</span>(<span style=\"color:#2cc160\">'<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>h1<span style=\"color:#73c6b3\">&gt;</span></span>Contato<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>/h1<span style=\"color:#73c6b3\">&gt;</span></span>'</span>)<br>  }<br>  res.<span style=\"color:#79b6f2\">end</span>(<span style=\"color:#2cc160\">'<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>h1<span style=\"color:#73c6b3\">&gt;</span></span>Página não encontrada!<span style=\"color:#fc929e\"><span style=\"color:#73c6b3\">&lt;</span>/h1<span style=\"color:#73c6b3\">&gt;</span></span>'</span>)<br>})<br>server.<span style=\"color:#79b6f2\">listen</span>(port, ip, () =&gt; {<br>  console.<span style=\"color:#79b6f2\">log</span>(`Servidor está escutando na porta ${port}`)<br>  console.<span style=\"color:#79b6f2\">log</span>(<span style=\"color:#2cc160\">'Comando para parar o servidor  ctrl + c'</span>);<br>})</span></code></pre>",
            "descricao": "Como criar servidor node.js, configurando rotas e exemplos de comando para iniciar e parar servidos node js.",
            "description": "Como criar servidor node.js, configurando rotas e exemplos de comando para iniciar e parar servidos node js.",
            "pesquisa": "como criar servidor node.js",
            "title": "Como criar servidor node.js",
            "url": "/-LPMDsnl9RQulbKF4yF9/como-criar-servidor-node-js-e-rotas"
            },
           {
            "assunto": [
            {
            "imagem": "/img/jquery.svg",
            "nome": "Jquery"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">Maneira correta de usar $(document).ready()</h2><p>Uma página não pode ser manipulada com segurança em quando o <code>document</code> não esteja \"pronto\" para uso. Portanto será necessário inserir seu código dentro do <code>$(document).ready()</code> para que o mesmo seja executado na página uma vez que Document Object Model (DOM) esteja pronto. Diferente do <code>$(window).on(\"load\", function() { })</code> que será executado apenas quando a página inteira for carregada.</p>\n<pre class=\"codigo\"><code data-code=\"Jquery\">$(document).ready(function() {<br>    console.log(\"ready!\");<br>});</code></pre>\n<p>Também é possível passar uma função nomeada para <code>$(document ).ready()</code> em vez de passar uma função anônima.</p>\n<pre class=\"codigo\"><code data-code=\"Jquery\">function readyFunction(jQuery) {    }<br><br>$(document).ready(readyFunction);\n</code></pre>\n\n",
            "conteudo_site": "<h2 class=\"sub-titulo\">Maneira correta de usar $(document).ready()</h2><p>Uma página não pode ser manipulada com segurança em quando o <code>document</code> não esteja \"pronto\" para uso. Portanto será necessário inserir seu código dentro do <code>$(document).ready()</code> para que o mesmo seja executado na página uma vez que Document Object Model (DOM) esteja pronto. Diferente do <code>$(window).on(\"load\", function() { })</code> que será executado apenas quando a página inteira for carregada.</p>\n<pre class=\"codigo\"><code data-code=\"Jquery\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">$(document).<span style=\"color:#79b6f2\">ready</span>(<span style=\"color:#c5a5c5\">function</span>() {<br>    console.<span style=\"color:#79b6f2\">log</span>(<span style=\"color:#2cc160\">\"ready!\"</span>);<br>});</span></code></pre>\n<p>Também é possível passar uma função nomeada para <code>$(document ).ready()</code> em vez de passar uma função anônima.</p>\n<pre class=\"codigo\"><code data-code=\"Jquery\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\"><span style=\"color:#c5a5c5\">function</span> readyFunction(jQuery) {    }<br><br>$(document).<span style=\"color:#79b6f2\">ready</span>(readyFunction);\n</span></code></pre>\n\n",
            "descricao": "Nesse tutorial vamos mostrar exemplo de como usar o ready jQuery",
            "description": "Nesse tutorial vamos mostrar exemplo de como usar o ready jQuery. Se seu ready não funciona veja como corrigir",
            "pesquisa": "exemplo de como usar o ready jQuer",
            "search": "jquery",
            "title": "Ready jQuery exemplo",
            "url": "/-LPMDVHQRMhDrLpssbJh/jquery-ready-exemplo"
            },
           {
            "assunto": [
            {
            "imagem": "/img/javascript.svg",
            "nome": "JavaScript"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">Lazy Loading Images</h2>\n<p>Para as imagens carregar de acordo com a sua visibilidade será necessário adicionar no <code>class</code> a classe <code>lazy</code>. Também deve ser passado o atributo <code>data-src</code> pois é nele que deve ter o caminho da imagem original que deve ser exibida. O atributo <code>src</code> será opcional de acordo com sua necessidade, você pode por exemplo por uma imagem de baixa qualidade ou deixa sem esse atributo.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">&lt;img class=\"lazy\" src=\"placeholder-image.jpg\" data-src=\"image-to-lazy-load.jpg\" alt=\"image!\"&gt;\n</code></pre>\n\n<p>O código abaixo vai utilizar observador de interseção para pegar todas as imagens que tem a <code>class=\"lazy\"</code> e vai trocar o atributo <code>data-src</code> por <code>src</code> e logo em seguida vai remover a classe <code>lazy</code>.</p>\n\n<p><strong>Observação:</strong> O <code>IntersectionObserver</code> não é compatível com todos os navegadores. Logo abaixo desse código tem uma versão compatível com todos os navegadores.</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\">document.addEventListener(\"DOMContentLoaded\", function() {\n  var lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\n\n  if (\"IntersectionObserver\" in window) {\n    let lazyImageObserver = new IntersectionObserver(function(entries, observer) {\n      entries.forEach(function(entry) {\n        if (entry.isIntersecting) {\n          let lazyImage = entry.target;\n          lazyImage.src = lazyImage.dataset.src;\n          lazyImage.classList.remove(\"lazy\");\n          lazyImageObserver.unobserve(lazyImage);\n        }\n      });\n    });\n\n    lazyImages.forEach(function(lazyImage) {\n      lazyImageObserver.observe(lazyImage);\n    });\n  } else {\n     //Possibly fall back to a more compatible method here\n  }\n});</code></pre>\n\n<p>Usando manipuladores de eventos (a maneira mais compatível)</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">document.addEventListener(\"DOMContentLoaded\", function() {\n  let lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\n  let active = false;\n\n  const lazyLoad = function() {\n    if (active === false) {\n      active = true;\n\n      setTimeout(function() {\n        lazyImages.forEach(function(lazyImage) {\n          if ((lazyImage.getBoundingClientRect().top <= window.innerHeight && lazyImage.getBoundingClientRect().bottom >= 0) && getComputedStyle(lazyImage).display !== \"none\") {\n            lazyImage.src = lazyImage.dataset.src;\n            lazyImage.classList.remove(\"lazy\");\n\n            lazyImages = lazyImages.filter(function(image) {\n              return image !== lazyImage;\n            });\n\n            if (lazyImages.length === 0) {\n              document.removeEventListener(\"scroll\", lazyLoad);\n              window.removeEventListener(\"resize\", lazyLoad);\n              window.removeEventListener(\"orientationchange\", lazyLoad);\n            }\n          }\n        });\n\n        active = false;\n      }, 200);\n    }\n  };\n\n  document.addEventListener(\"scroll\", lazyLoad);\n  window.addEventListener(\"resize\", lazyLoad);\n  window.addEventListener(\"orientationchange\", lazyLoad);\n});</code></pre>\n\n<p>Também é possível utilizar em imagens em CSS.</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\">&lt;div class=\"lazy-background\">\n  &lt;h1>Here's a hero heading to get your attention!&lt;/h1>\n  &lt;p>Here's hero copy to convince you to buy a thing!&lt;/p>\n  &lt;a href=\"/buy-a-thing\">Buy a thing!&lt;/a>\n&lt;/div></code></pre>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\">.lazy-background {\n  background-image: url(\"hero-placeholder.jpg\"); /* Placeholder image */\n}\n\n.lazy-background.visible {\n  background-image: url(\"hero.jpg\"); /* The final image */\n}</code></pre>\n\n<p>A partir daqui, usaremos JavaScript para verificar se o elemento está na viewport (com observador de interseção!) E adicionar a <code>visible</code> classe ao <code>div.lazy-background</code> elemento naquele momento, que carrega a imagem.</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\">document.addEventListener(\"DOMContentLoaded\", function() {\n  var lazyBackgrounds = [].slice.call(document.querySelectorAll(\".lazy-background\"));\n\n  if (\"IntersectionObserver\" in window) {\n    let lazyBackgroundObserver = new IntersectionObserver(function(entries, observer) {\n      entries.forEach(function(entry) {\n        if (entry.isIntersecting) {\n          entry.target.classList.add(\"visible\");\n          lazyBackgroundObserver.unobserve(entry.target);\n        }\n      });\n    });\n\n    lazyBackgrounds.forEach(function(lazyBackground) {\n      lazyBackgroundObserver.observe(lazyBackground);\n    });\n  }\n});</code></pre>",
            "conteudo_site": "<h2 class=\"sub-titulo\">Lazy Loading Images</h2>\n<p>Para as imagens carregar de acordo com a sua visibilidade será necessário adicionar no <code>class</code> a classe <code>lazy</code>. Também deve ser passado o atributo <code>data-src</code> pois é nele que deve ter o caminho da imagem original que deve ser exibida. O atributo <code>src</code> será opcional de acordo com sua necessidade, você pode por exemplo por uma imagem de baixa qualidade ou deixa sem esse atributo.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">&lt;img <span style=\"color:#c5a5c5\">class</span>=<span style=\"color:#2cc160\">\"lazy\"</span> src=<span style=\"color:#2cc160\">\"placeholder-image.jpg\"</span> data-src=<span style=\"color:#2cc160\">\"image-to-lazy-load.jpg\"</span> alt=<span style=\"color:#2cc160\">\"image!\"</span>&gt;\n</span></code></pre>\n\n<p>O código abaixo vai utilizar observador de interseção para pegar todas as imagens que tem a <code>class=\"lazy\"</code> e vai trocar o atributo <code>data-src</code> por <code>src</code> e logo em seguida vai remover a classe <code>lazy</code>.</p>\n\n<p><strong>Observação:</strong> O <code>IntersectionObserver</code> não é compatível com todos os navegadores. Logo abaixo desse código tem uma versão compatível com todos os navegadores.</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">document.<span style=\"color:#79b6f2\">addEventListener</span>(<span style=\"color:#2cc160\">\"DOMContentLoaded\"</span>, <span style=\"color:#c5a5c5\">function</span>() {<span style=\"color:#79b6f2\">\n</span>  <span style=\"color:#c5a5c5\">var</span> lazyImages = [].<span style=\"color:#79b6f2\">slice</span>.<span style=\"color:#79b6f2\">call</span>(document.<span style=\"color:#79b6f2\">querySelectorAll</span>(<span style=\"color:#2cc160\">\"img.lazy\"</span>));<span style=\"color:#79b6f2\">\n\n</span>  <span style=\"color:#c5a5c5\">if</span> (<span style=\"color:#2cc160\">\"IntersectionObserver\"</span> <span style=\"color:#c5a5c5\">in</span> window) {<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">let</span> lazyImageObserver = <span style=\"color:#c5a5c5\">new</span> IntersectionObserver(<span style=\"color:#c5a5c5\">function</span>(entries, observer) {<span style=\"color:#79b6f2\">\n</span>      entries.<span style=\"color:#79b6f2\">forEach</span>(<span style=\"color:#c5a5c5\">function</span>(entry) {<span style=\"color:#79b6f2\">\n</span>        <span style=\"color:#c5a5c5\">if</span> (entry.<span style=\"color:#79b6f2\">isIntersecting</span>) {<span style=\"color:#79b6f2\">\n</span>          <span style=\"color:#c5a5c5\">let</span> lazyImage = entry.<span style=\"color:#79b6f2\">target</span>;<span style=\"color:#79b6f2\">\n</span>          lazyImage.<span style=\"color:#79b6f2\">src</span> = lazyImage.<span style=\"color:#79b6f2\">dataset</span>.<span style=\"color:#79b6f2\">src</span>;<span style=\"color:#79b6f2\">\n</span>          lazyImage.<span style=\"color:#79b6f2\">classList</span>.<span style=\"color:#79b6f2\">remove</span>(<span style=\"color:#2cc160\">\"lazy\"</span>);<span style=\"color:#79b6f2\">\n</span>          lazyImageObserver.<span style=\"color:#79b6f2\">unobserve</span>(lazyImage);<span style=\"color:#79b6f2\">\n</span>        }<span style=\"color:#79b6f2\">\n</span>      });<span style=\"color:#79b6f2\">\n</span>    });<span style=\"color:#79b6f2\">\n\n</span>    lazyImages.<span style=\"color:#79b6f2\">forEach</span>(<span style=\"color:#c5a5c5\">function</span>(lazyImage) {<span style=\"color:#79b6f2\">\n</span>      lazyImageObserver.<span style=\"color:#79b6f2\">observe</span>(lazyImage);<span style=\"color:#79b6f2\">\n</span>    });<span style=\"color:#79b6f2\">\n</span>  } <span style=\"color:#c5a5c5\">else</span> {<span style=\"color:#79b6f2\">\n</span>     <span style=\"color:green\">//Possibly fall back to a more compatible method here\n  }\n});</span></span></code></pre>\n\n<p>Usando manipuladores de eventos (a maneira mais compatível)</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">document.<span style=\"color:#79b6f2\">addEventListener</span>(<span style=\"color:#2cc160\">\"DOMContentLoaded\"</span>, <span style=\"color:#c5a5c5\">function</span>() {<span style=\"color:#79b6f2\">\n</span>  <span style=\"color:#c5a5c5\">let</span> lazyImages = [].<span style=\"color:#79b6f2\">slice</span>.<span style=\"color:#79b6f2\">call</span>(document.<span style=\"color:#79b6f2\">querySelectorAll</span>(<span style=\"color:#2cc160\">\"img.lazy\"</span>));<span style=\"color:#79b6f2\">\n</span>  <span style=\"color:#c5a5c5\">let</span> active = <span style=\"color:#c5a5c5\">false</span>;<span style=\"color:#79b6f2\">\n\n</span>  <span style=\"color:#c5a5c5\">const</span> lazyLoad = <span style=\"color:#c5a5c5\">function</span>() {<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">if</span> (active === <span style=\"color:#c5a5c5\">false</span>) {<span style=\"color:#79b6f2\">\n</span>      active = <span style=\"color:#c5a5c5\">true</span>;<span style=\"color:#79b6f2\">\n\n</span>      setTimeout(<span style=\"color:#c5a5c5\">function</span>() {<span style=\"color:#79b6f2\">\n</span>        lazyImages.<span style=\"color:#79b6f2\">forEach</span>(<span style=\"color:#c5a5c5\">function</span>(lazyImage) {<span style=\"color:#79b6f2\">\n</span>          <span style=\"color:#c5a5c5\">if</span> ((lazyImage.<span style=\"color:#79b6f2\">getBoundingClientRect</span>().<span style=\"color:#79b6f2\">top</span> &lt;= window.<span style=\"color:#79b6f2\">innerHeight</span> &amp;&amp; lazyImage.<span style=\"color:#79b6f2\">getBoundingClientRect</span>().<span style=\"color:#79b6f2\">bottom</span> &gt;= <span style=\"color:#79b6f2\">0</span>) &amp;&amp; getComputedStyle(lazyImage).<span style=\"color:#79b6f2\">display</span> !== <span style=\"color:#2cc160\">\"none\"</span>) {<span style=\"color:#79b6f2\">\n</span>            lazyImage.<span style=\"color:#79b6f2\">src</span> = lazyImage.<span style=\"color:#79b6f2\">dataset</span>.<span style=\"color:#79b6f2\">src</span>;<span style=\"color:#79b6f2\">\n</span>            lazyImage.<span style=\"color:#79b6f2\">classList</span>.<span style=\"color:#79b6f2\">remove</span>(<span style=\"color:#2cc160\">\"lazy\"</span>);<span style=\"color:#79b6f2\">\n\n</span>            lazyImages = lazyImages.<span style=\"color:#79b6f2\">filter</span>(<span style=\"color:#c5a5c5\">function</span>(image) {<span style=\"color:#79b6f2\">\n</span>              <span style=\"color:#c5a5c5\">return</span> image !== lazyImage;<span style=\"color:#79b6f2\">\n</span>            });<span style=\"color:#79b6f2\">\n\n</span>            <span style=\"color:#c5a5c5\">if</span> (lazyImages.<span style=\"color:#79b6f2\">length</span> === <span style=\"color:#79b6f2\">0</span>) {<span style=\"color:#79b6f2\">\n</span>              document.<span style=\"color:#79b6f2\">removeEventListener</span>(<span style=\"color:#2cc160\">\"scroll\"</span>, lazyLoad);<span style=\"color:#79b6f2\">\n</span>              window.<span style=\"color:#79b6f2\">removeEventListener</span>(<span style=\"color:#2cc160\">\"resize\"</span>, lazyLoad);<span style=\"color:#79b6f2\">\n</span>              window.<span style=\"color:#79b6f2\">removeEventListener</span>(<span style=\"color:#2cc160\">\"orientationchange\"</span>, lazyLoad);<span style=\"color:#79b6f2\">\n</span>            }<span style=\"color:#79b6f2\">\n</span>          }<span style=\"color:#79b6f2\">\n</span>        });<span style=\"color:#79b6f2\">\n\n</span>        active = <span style=\"color:#c5a5c5\">false</span>;<span style=\"color:#79b6f2\">\n</span>      }, <span style=\"color:#79b6f2\">200</span>);<span style=\"color:#79b6f2\">\n</span>    }<span style=\"color:#79b6f2\">\n</span>  };<span style=\"color:#79b6f2\">\n\n</span>  document.<span style=\"color:#79b6f2\">addEventListener</span>(<span style=\"color:#2cc160\">\"scroll\"</span>, lazyLoad);<span style=\"color:#79b6f2\">\n</span>  window.<span style=\"color:#79b6f2\">addEventListener</span>(<span style=\"color:#2cc160\">\"resize\"</span>, lazyLoad);<span style=\"color:#79b6f2\">\n</span>  window.<span style=\"color:#79b6f2\">addEventListener</span>(<span style=\"color:#2cc160\">\"orientationchange\"</span>, lazyLoad);<span style=\"color:#79b6f2\">\n</span>});</span></code></pre>\n\n<p>Também é possível utilizar em imagens em CSS.</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">&lt;div <span style=\"color:#c5a5c5\">class</span>=<span style=\"color:#2cc160\">\"lazy-background\"</span>&gt;<span style=\"color:#79b6f2\">\n</span>  &lt;h1&gt;Here<span style=\"color:#2cc160\">'s a hero heading to get your attention!&lt;/h1&gt;\n  &lt;p&gt;Here'</span>s hero copy to convince you to buy a thing!&lt;/p&gt;<span style=\"color:#79b6f2\">\n</span>  &lt;a href=<span style=\"color:#2cc160\">\"/buy-a-thing\"</span>&gt;Buy a thing!&lt;/a&gt;<span style=\"color:#79b6f2\">\n</span>&lt;/div&gt;</span></code></pre>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">.<span style=\"color:#79b6f2\">lazy</span>-background {<span style=\"color:#79b6f2\">\n</span>  background-image: url(<span style=\"color:#2cc160\">\"hero-placeholder.jpg\"</span>); <span style=\"color:green\">/* Placeholder image */</span><span style=\"color:#79b6f2\">\n</span>}\n\n.<span style=\"color:#79b6f2\">lazy</span>-background.<span style=\"color:#79b6f2\">visible</span> {<span style=\"color:#79b6f2\">\n</span>  background-image: url(<span style=\"color:#2cc160\">\"hero.jpg\"</span>); <span style=\"color:green\">/* The final image */</span><span style=\"color:#79b6f2\">\n</span>}</span></code></pre>\n\n<p>A partir daqui, usaremos JavaScript para verificar se o elemento está na viewport (com observador de interseção!) E adicionar a <code>visible</code> classe ao <code>div.lazy-background</code> elemento naquele momento, que carrega a imagem.</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">document.<span style=\"color:#79b6f2\">addEventListener</span>(<span style=\"color:#2cc160\">\"DOMContentLoaded\"</span>, <span style=\"color:#c5a5c5\">function</span>() {<span style=\"color:#79b6f2\">\n</span>  <span style=\"color:#c5a5c5\">var</span> lazyBackgrounds = [].<span style=\"color:#79b6f2\">slice</span>.<span style=\"color:#79b6f2\">call</span>(document.<span style=\"color:#79b6f2\">querySelectorAll</span>(<span style=\"color:#2cc160\">\".lazy-background\"</span>));<span style=\"color:#79b6f2\">\n\n</span>  <span style=\"color:#c5a5c5\">if</span> (<span style=\"color:#2cc160\">\"IntersectionObserver\"</span> <span style=\"color:#c5a5c5\">in</span> window) {<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">let</span> lazyBackgroundObserver = <span style=\"color:#c5a5c5\">new</span> IntersectionObserver(<span style=\"color:#c5a5c5\">function</span>(entries, observer) {<span style=\"color:#79b6f2\">\n</span>      entries.<span style=\"color:#79b6f2\">forEach</span>(<span style=\"color:#c5a5c5\">function</span>(entry) {<span style=\"color:#79b6f2\">\n</span>        <span style=\"color:#c5a5c5\">if</span> (entry.<span style=\"color:#79b6f2\">isIntersecting</span>) {<span style=\"color:#79b6f2\">\n</span>          entry.<span style=\"color:#79b6f2\">target</span>.<span style=\"color:#79b6f2\">classList</span>.<span style=\"color:#79b6f2\">add</span>(<span style=\"color:#2cc160\">\"visible\"</span>);<span style=\"color:#79b6f2\">\n</span>          lazyBackgroundObserver.<span style=\"color:#79b6f2\">unobserve</span>(entry.<span style=\"color:#79b6f2\">target</span>);<span style=\"color:#79b6f2\">\n</span>        }<span style=\"color:#79b6f2\">\n</span>      });<span style=\"color:#79b6f2\">\n</span>    });<span style=\"color:#79b6f2\">\n\n</span>    lazyBackgrounds.<span style=\"color:#79b6f2\">forEach</span>(<span style=\"color:#c5a5c5\">function</span>(lazyBackground) {<span style=\"color:#79b6f2\">\n</span>      lazyBackgroundObserver.<span style=\"color:#79b6f2\">observe</span>(lazyBackground);<span style=\"color:#79b6f2\">\n</span>    });<span style=\"color:#79b6f2\">\n</span>  }<span style=\"color:#79b6f2\">\n</span>});</span></code></pre>",
            "descricao": "Otimizar o desempenho das páginas carregando as imagens só depois que a página estiver carregada, as imagens serão carregadas quando estiverem visível. ",
            "description": "Otimizar o desempenho das páginas carregando as imagens só depois que a página estiver carregada, as imagens serão carregadas quando estiverem visível melhorando o tempo de carregamento da página. ",
            "pesquisa": "como carregar a imagem de acordo com o scroll página, carregar imagem apenas quando elas estiverem visível",
            "title": "Como carregar a imagem de acordo com o scroll página, carregar imagem apenas quando elas estiverem visível",
            "url": "/-LRTz5eNY4xJlNMZUrll/como-carregar-imagem-de-acordo-com-scroll-pagina-carregar-imagem-apenas-quando-elas-estiverem-visivel"
            },
           {
            "assunto": [
            {
            "imagem": "/img/sql-server.svg",
            "nome": "SQL Server"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">Limit e Offset para paginação web SQL Server</h2>\n<p>Para SQL Server partir do 2012 utilize esse exemplo.</p>\n\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">SELECT coluna1,<span style=\"color:#79b6f2\">\n</span>       .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\">\n</span>  FROM tabela\n WHERE .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\">\n</span> ORDER BY coluna1,<span style=\"color:#79b6f2\">\n</span>          .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\">\n</span> OFFSET @Offset ROWS\n FETCH NEXT @Limit ROWS ONLY;</span></code></pre>\n\n<p><strong>Exemplo de utilização</strong> </p>\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">DECLARE @QtdPorPagina INT = <span style=\"color:#79b6f2\">50</span>,<span style=\"color:#79b6f2\">\n</span>        @Pagina       INT = <span style=\"color:#79b6f2\">1</span>;\nSELECT os.<span style=\"color:#79b6f2\">id</span>,<span style=\"color:#79b6f2\">\n</span>       os.<span style=\"color:#79b6f2\">dataHora</span>,<span style=\"color:#79b6f2\">\n</span>       material.<span style=\"color:#79b6f2\">nome</span> AS nomeEquip,<span style=\"color:#79b6f2\">\n</span>       cliente.<span style=\"color:#79b6f2\">nomeFantasia</span>,<span style=\"color:#79b6f2\">\n</span>       setor.<span style=\"color:#79b6f2\">nome</span> AS NomeSetor,<span style=\"color:#79b6f2\">\n</span>       os.<span style=\"color:#79b6f2\">motivoOs</span>,<span style=\"color:#79b6f2\">\n</span>       (SELECT SUM(itemMaterial.<span style=\"color:#79b6f2\">valorUnitario</span>)<span style=\"color:#79b6f2\">\n</span>          FROM os AS OS1\n               INNER JOIN itemMaterial ON itemMaterial.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idItemMaterial\n</span>         WHERE OS1.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">id</span> ) AS TotalMaterial,<span style=\"color:#79b6f2\">\n</span>       tipoOs.<span style=\"color:#79b6f2\">nome</span> AS NomeTipoOS,<span style=\"color:#79b6f2\">\n</span>       itemMaterial.<span style=\"color:#79b6f2\">nSerie</span>,<span style=\"color:#79b6f2\">\n</span>       itemMaterial.<span style=\"color:#79b6f2\">rm</span>,<span style=\"color:#79b6f2\">\n</span>       os.<span style=\"color:#79b6f2\">status\n</span>  FROM os\n       INNER JOIN itemMaterial ON itemMaterial.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idItemMaterial\n</span>       INNER JOIN modelo ON modelo.<span style=\"color:#79b6f2\">id</span> = itemMaterial.<span style=\"color:#79b6f2\">idModelo\n</span>       INNER JOIN material ON material.<span style=\"color:#79b6f2\">id</span> = itemMaterial.<span style=\"color:#79b6f2\">idMaterial\n</span>       INNER JOIN cliente ON cliente.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idCliente\n</span>       INNER JOIN setor ON setor.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idSetor\n</span>       INNER JOIN usuario ON usuario.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idUsuarioSolicitante\n</span>       INNER JOIN tipoOs ON tipoOs.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idTipoOs\n</span> WHERE cliente.<span style=\"color:#79b6f2\">id</span> = (SELECT usuario.<span style=\"color:#79b6f2\">idCliente\n</span>                       FROM usuario\n                      WHERE usuario.<span style=\"color:#79b6f2\">login</span> = <span style=\"color:#2cc160\">'julio'</span>)<span style=\"color:#79b6f2\">\n</span> ORDER BY dataHora DESC\nOFFSET (@Pagina - <span style=\"color:#79b6f2\">1</span>) * @QtdPorPagina ROWS\n FETCH NEXT @QtdPorPagina ROWS ONLY;\n\n</span></code></pre>\n\n<p>Para SQL Server anterior ao 2012</p>\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">WITH resultado AS\n(SELECT coluna1,<span style=\"color:#79b6f2\">\n</span>        .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>,<span style=\"color:#79b6f2\">\n</span>        ROW_NUMBER() OVER (ORDER BY coluna1, .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>) AS linha\n   FROM tabela\n  WHERE .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>)\nSELECT *<span style=\"color:#79b6f2\">\n</span>  FROM resultado\n WHERE linha &gt;= @Offset\n   AND linha &lt; @Offset + @Limit</span></code></pre>\n",
            "conteudo_site": "<h2 class=\"sub-titulo\">Limit e Offset para paginação web SQL Server</h2>\n<p>Para SQL Server partir do 2012 utilize esse exemplo.</p>\n\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">SELECT coluna1,<span style=\"color:#79b6f2\">\n</span>       .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\">\n</span>  FROM tabela\n WHERE .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\">\n</span> ORDER BY coluna1,<span style=\"color:#79b6f2\">\n</span>          .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\">\n</span> OFFSET @Offset ROWS\n FETCH NEXT @Limit ROWS ONLY;</span></code></pre>\n\n<p><strong>Exemplo de utilização</strong> </p>\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">DECLARE @QtdPorPagina INT = <span style=\"color:#79b6f2\">50</span>,<span style=\"color:#79b6f2\">\n</span>        @Pagina       INT = <span style=\"color:#79b6f2\">1</span>;\nSELECT os.<span style=\"color:#79b6f2\">id</span>,<span style=\"color:#79b6f2\">\n</span>       os.<span style=\"color:#79b6f2\">dataHora</span>,<span style=\"color:#79b6f2\">\n</span>       material.<span style=\"color:#79b6f2\">nome</span> AS nomeEquip,<span style=\"color:#79b6f2\">\n</span>       cliente.<span style=\"color:#79b6f2\">nomeFantasia</span>,<span style=\"color:#79b6f2\">\n</span>       setor.<span style=\"color:#79b6f2\">nome</span> AS NomeSetor,<span style=\"color:#79b6f2\">\n</span>       os.<span style=\"color:#79b6f2\">motivoOs</span>,<span style=\"color:#79b6f2\">\n</span>       (SELECT SUM(itemMaterial.<span style=\"color:#79b6f2\">valorUnitario</span>)<span style=\"color:#79b6f2\">\n</span>          FROM os AS OS1\n               INNER JOIN itemMaterial ON itemMaterial.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idItemMaterial\n</span>         WHERE OS1.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">id</span> ) AS TotalMaterial,<span style=\"color:#79b6f2\">\n</span>       tipoOs.<span style=\"color:#79b6f2\">nome</span> AS NomeTipoOS,<span style=\"color:#79b6f2\">\n</span>       itemMaterial.<span style=\"color:#79b6f2\">nSerie</span>,<span style=\"color:#79b6f2\">\n</span>       itemMaterial.<span style=\"color:#79b6f2\">rm</span>,<span style=\"color:#79b6f2\">\n</span>       os.<span style=\"color:#79b6f2\">status\n</span>  FROM os\n       INNER JOIN itemMaterial ON itemMaterial.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idItemMaterial\n</span>       INNER JOIN modelo ON modelo.<span style=\"color:#79b6f2\">id</span> = itemMaterial.<span style=\"color:#79b6f2\">idModelo\n</span>       INNER JOIN material ON material.<span style=\"color:#79b6f2\">id</span> = itemMaterial.<span style=\"color:#79b6f2\">idMaterial\n</span>       INNER JOIN cliente ON cliente.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idCliente\n</span>       INNER JOIN setor ON setor.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idSetor\n</span>       INNER JOIN usuario ON usuario.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idUsuarioSolicitante\n</span>       INNER JOIN tipoOs ON tipoOs.<span style=\"color:#79b6f2\">id</span> = os.<span style=\"color:#79b6f2\">idTipoOs\n</span> WHERE cliente.<span style=\"color:#79b6f2\">id</span> = (SELECT usuario.<span style=\"color:#79b6f2\">idCliente\n</span>                       FROM usuario\n                      WHERE usuario.<span style=\"color:#79b6f2\">login</span> = <span style=\"color:#2cc160\">'julio'</span>)<span style=\"color:#79b6f2\">\n</span> ORDER BY dataHora DESC\nOFFSET (@Pagina - <span style=\"color:#79b6f2\">1</span>) * @QtdPorPagina ROWS\n FETCH NEXT @QtdPorPagina ROWS ONLY;\n\n</span></code></pre>\n\n<p>Para SQL Server anterior ao 2012</p>\n<pre class=\"codigo\"><code style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">WITH resultado AS\n(SELECT coluna1,<span style=\"color:#79b6f2\">\n</span>        .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>,<span style=\"color:#79b6f2\">\n</span>        ROW_NUMBER() OVER (ORDER BY coluna1, .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>) AS linha\n   FROM tabela\n  WHERE .<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>.<span style=\"color:#79b6f2\"></span>)\nSELECT *<span style=\"color:#79b6f2\">\n</span>  FROM resultado\n WHERE linha &gt;= @Offset\n   AND linha &lt; @Offset + @Limit</span></code></pre>\n",
            "descricao": "Exemplo de como criar paginação SQL Server. offset sql server 2008 2012 2014 2016.",
            "description": "Exemplo de como criar paginação SQL Server. offset sql server 2008 2012 2014 2016.",
            "pesquisa": "paginação sql server a partir do 2012 e anterior a 2012",
            "title": "Paginação sql server a partir do 2012 e anterior a 2012",
            "url": "/-LQptr9FCo_Or8U-vPb-/como-criar-paginacao-sql-server"
            },
             {
            "assunto": [
            {
            "imagem": "/img/csharp-logo.svg",
            "nome": "CSharp"
            }
            ],
            "ativo": true,
            "conteudo": "<h2 class=\"sub-titulo\">Convert from Html To Pdf in ASP.NET MVC with C#</h2>\n\n<li><strong>Pré-requisito</strong></li>\n<p> instalar <code>EvoPDF</code> no <code>NuGet</code>. Para você conseguir instalar copie o código abaixo e cole no seu <code>console do gerenciador de pacotes</code>.</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\">PM> Install-Package EvoPDF</code></pre>\n\n<p>Nesse exemplo vamos mostrar como gerar uma página html para pdf.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">[HttpPost]\npublic ActionResult Imprimir() {\n     PdfConverter pdfConverter = new PdfConverter();\n     pdfConverter.LicenseKey = \"B4msff546hjghYiJuZhpmahpGRkZE=\";\n     string url = Request.Url.Authority.ToString() + \"/RelatorioVenda/getPdf\";\n     var bytes = pdfConverter.GetPdfBytesFromUrl(url);\n     return File(bytes, \"application/pdf\");\n}\n\n[HttpGet]\npublic ActionResult getPdf() {\n     return View();\n}\n</code></pre>\n\n<p>Nesse exemplo vamos mostrar como baixar o pdf ao acessar a <code>ActionResult Imprimir()</code>.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\">[HttpPost]\npublic ActionResult Imprimir() {\n     PdfConverter pdfConverter = new PdfConverter();\n     pdfConverter.LicenseKey = \"B4msff546hjghYiJuZhpmahpGRkZE=\";\n     string url = Request.Url.Authority.ToString() + \"/RelatorioVenda/getPdf\";\n    FileResult fileResult = new FileContentResult(pdf, \"application/pdf\");\n      \n    fileResult.FileDownloadName = \"RenderedPage.pdf\";\n    return fileResult;\n}\n\n[HttpGet]\npublic ActionResult getPdf() {\n     return View();\n}</code></pre>\n",
            "conteudo_site": "<h2 class=\"sub-titulo\">Convert from Html To Pdf in ASP.NET MVC with C#</h2>\n\n<li><strong>Pré-requisito</strong></li>\n<p> instalar <code>EvoPDF</code> no <code>NuGet</code>. Para você conseguir instalar copie o código abaixo e cole no seu <code>console do gerenciador de pacotes</code>.</p>\n\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">PM&gt; Install-Package EvoPDF</span></code></pre>\n\n<p>Nesse exemplo vamos mostrar como gerar uma página html para pdf.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">[HttpPost]\n<span style=\"color:#c5a5c5\">public</span> ActionResult Imprimir() {<span style=\"color:#79b6f2\">\n</span>     PdfConverter pdfConverter = <span style=\"color:#c5a5c5\">new</span> PdfConverter();<span style=\"color:#79b6f2\">\n</span>     pdfConverter.<span style=\"color:#79b6f2\">LicenseKey</span> = <span style=\"color:#2cc160\">\"B4msff546hjghYiJuZhpmahpGRkZE=\"</span>;<span style=\"color:#79b6f2\">\n</span>     string url = Request.<span style=\"color:#79b6f2\">Url</span>.<span style=\"color:#79b6f2\">Authority</span>.<span style=\"color:#79b6f2\">ToString</span>() + <span style=\"color:#2cc160\">\"/RelatorioVenda/getPdf\"</span>;<span style=\"color:#79b6f2\">\n</span>     <span style=\"color:#c5a5c5\">var</span> bytes = pdfConverter.<span style=\"color:#79b6f2\">GetPdfBytesFromUrl</span>(url);<span style=\"color:#79b6f2\">\n</span>     <span style=\"color:#c5a5c5\">return</span> File(bytes, <span style=\"color:#2cc160\">\"application/pdf\"</span>);<span style=\"color:#79b6f2\">\n</span>}<span style=\"color:#79b6f2\">\n\n</span>[HttpGet]\n<span style=\"color:#c5a5c5\">public</span> ActionResult getPdf() {<span style=\"color:#79b6f2\">\n</span>     <span style=\"color:#c5a5c5\">return</span> View();<span style=\"color:#79b6f2\">\n</span>}\n</span></code></pre>\n\n<p>Nesse exemplo vamos mostrar como baixar o pdf ao acessar a <code>ActionResult Imprimir()</code>.</p>\n<pre class=\"codigo\"><code data-code=\"javaScript\" style=\"font-family: Consolas, &quot;Courier New&quot;, monospace;\"><span style=\"color:white\">[HttpPost]\n<span style=\"color:#c5a5c5\">public</span> ActionResult Imprimir() {<span style=\"color:#79b6f2\">\n</span>     PdfConverter pdfConverter = <span style=\"color:#c5a5c5\">new</span> PdfConverter();<span style=\"color:#79b6f2\">\n</span>     pdfConverter.<span style=\"color:#79b6f2\">LicenseKey</span> = <span style=\"color:#2cc160\">\"B4msff546hjghYiJuZhpmahpGRkZE=\"</span>;<span style=\"color:#79b6f2\">\n</span>     string url = Request.<span style=\"color:#79b6f2\">Url</span>.<span style=\"color:#79b6f2\">Authority</span>.<span style=\"color:#79b6f2\">ToString</span>() + <span style=\"color:#2cc160\">\"/RelatorioVenda/getPdf\"</span>;<span style=\"color:#79b6f2\">\n</span>    FileResult fileResult = <span style=\"color:#c5a5c5\">new</span> FileContentResult(pdf, <span style=\"color:#2cc160\">\"application/pdf\"</span>);<span style=\"color:#79b6f2\">\n</span>      <span style=\"color:#79b6f2\">\n</span>    fileResult.<span style=\"color:#79b6f2\">FileDownloadName</span> = <span style=\"color:#2cc160\">\"RenderedPage.pdf\"</span>;<span style=\"color:#79b6f2\">\n</span>    <span style=\"color:#c5a5c5\">return</span> fileResult;<span style=\"color:#79b6f2\">\n</span>}<span style=\"color:#79b6f2\">\n\n</span>[HttpGet]\n<span style=\"color:#c5a5c5\">public</span> ActionResult getPdf() {<span style=\"color:#79b6f2\">\n</span>     <span style=\"color:#c5a5c5\">return</span> View();<span style=\"color:#79b6f2\">\n</span>}</span></code></pre>\n",
            "descricao": "Nesse exemplo vamos mostrar como gerar página html para pdf em c# mvc, veja como imprimir uma página mvc.",
            "description": "Nesse exemplo vamos mostrar como gerar página html para pdf em c# mvc, veja como imprimir uma página mvc.",
            "pesquisa": "como converter html para pdf em ASP.NET MVC C#. imprimir página pdf.",
            "title": "Como converter html para pdf em ASP.NET MVC C#. imprimir página pdf.",
            "url": "/-LRTMFQJIRtTSPxFrzFV/como-converter-html-para-pdf-asp-net-mvc-c#-imprimir-pagina-pdf"
            }]


        /*
        let repos
        if (__isBrowser__) {
          repos = window.__INITIAL_DATA__
          delete window.__INITIAL_DATA__
        } else {
          repos = this.props.staticContext.data
        }

        this.state = {
          repos:repos,
          loading: repos ? false : true,
        }
    
        this.fetchRepos = this.fetchRepos.bind(this)
*/
    }

    /*
    componentDidMount() {
        if (!this.state.repos) {
            this.fetchRepos(this.props.match.params.id)
          }
    }

    componentDidUpdate (prevProps, prevState) {
        if (prevProps.match.params.id !== this.props.match.params.id) {
          this.fetchRepos(this.props.match.params.id)
        }
    }

    fetchRepos (lang) {
        this.setState(() => ({
          loading: true
        }))
    
        this.props.fetchInitialData(lang)
          .then((repos) => this.setState(() => ({
            repos,
            loading: false,
          })))
      }
*/

    render(){
        /*
        const { loading, repos } = this.state;
        if (loading === true) {
          return <p>LOADING</p>
        }
        */
        //var result =Object.values(repos);



        //<li><a href="/pagina/1/como-criar-site-react-js" title="React js">React js</a></li>
        //<li><a href="/pagina/3/jquery-ready-documentacao" title="Jquery">Jquery</a></li>
        //<li><a href="/pagina/2/como-utilizar-map-react-array-list" title="javaScript">javaScript</a></li>
        //dangerouslySetInnerHTML={{__html:adsTopoGabriel }} 
        //var adsTopoGabriel = "";//'<ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-5825646877386493" data-ad-slot="5291356734"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>';
        var adsTopo = '<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9280026867797270" data-ad-slot="1911584022" data-ad-format="auto" data-full-width-responsive="true"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>';
        var adsEsquerdo = '<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9280026867797270" data-ad-slot="4048762396" data-ad-format="auto" data-full-width-responsive="true"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>';
        var adsDireito = '<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9280026867797270" data-ad-slot="2538022566" data-ad-format="auto" data-full-width-responsive="true"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>';
        var adsConteudo = '<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9280026867797270" data-ad-slot="5901851801" data-ad-format="auto" data-full-width-responsive="true"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>';
        return (<div className="corpo-pagina">
                    <div className="anuncio-topo" dangerouslySetInnerHTML={{__html:adsTopo }}/>
                    <div className="container-esquerdo">
                        <div className="anuncio-esquerdo" dangerouslySetInnerHTML={{__html:adsEsquerdo }}/>
                    </div>
                    <div className="conteudo-home">
                    <h3 className="titulo-home">Conteúdos mais acessados</h3>
                    <h1 className="sub-titulo-home">Guia desenvolvedor</h1>
                    {
                this.conteudo.map((item, index) =>
                        <div key={index}>
                            <div className="conteudo-home-container">
                                <div className="conteudo-home-img">
                                    <img src={item.assunto[0].imagem} className="img-destaque" alt={item.title} />
                                </div>
                                <div className="conteudo-home-detalhe">
                                    <a href={"/pagina"+item.url}><h2>{item.title}</h2></a>
                                    <div>
                                    <h3>{item.descricao}</h3>
                                    </div>
                                    <div className="conteudo-home-info">
                                    <a href={"/busca/assunto/"+item.assunto[0].nome} title={item.assunto[0].nome} className="assunto"><h4>{item.assunto[0].nome}</h4></a>
                                    </div>
                                </div>
                            </div>
                            <hr className="hr-margin"/>
                              { ((index+1) / 3) % 1 == 0 ?<div><div className="anuncio-conteudo" dangerouslySetInnerHTML={{__html:adsConteudo }}/><hr className="hr-margin"/></div>:"" }
                        </div>
                        )
                    }
                    <p className="titulo-produto"><strong>Top cursos</strong> tá todo mundo clicando</p>
                    <Produto />
                    </div>
                    <div className="anuncio-direito" dangerouslySetInnerHTML={{__html:adsDireito }}/>
            </div>);
    }
}
export default Home;